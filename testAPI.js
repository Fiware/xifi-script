#!/usr/bin/env node

/************************************************************************/
// Copyright 2015 CREATE-NET, Via alla Cascata, 56, 38123 Trento, Italy //
// This file is part of Xifi project                                    //
// author attybro                                                       //
//                                                                      //
// This is an API tester for the XIFI monitoring APIs                   //
/************************************************************************/

var OAuth2 = require('oauth').OAuth2;
var http = require('http');
var path = require('path');
var util = require('util');
var url = require('url');
var fs = require('fs');


/**
 * Program configuration.
 *
 * <var>config</var> attributes will be updated with those read from configuration file, if exists, and from
 * command line arguments, in that order. Configuration file could be either a separate JSON file or a "config"
 * key within "package.json" file (the default).
 *
 * <var>ConsumerKey</var> and <var>ConsumerSecret</var> are generated by Cloud Portal, while <var>Username</var>
 * and <var>Password</var> are the user credentials.
 *
 * @namespace
 * @property {string}   IDMaddress      - Identity Manager URL.
 * @property {string}   APIip           - listen address of the Federation Monitoring API.
 * @property {string}   APIport         - listen port of the Federation Monitoring API.
 * @property {string}   APIpath         - resource path to query to Federation Monitoring.
 * @property {string}   ConsumerKey     - key generated by Cloud Portal.
 * @property {string}   ConsumerSecret  - secret value generated by Cloud Portal.
 * @property {string}   Username        - user name.
 * @property {string}   Password        - user password.
 */
var config = {
    IDMaddress:         null,
    APIip:              null,
    APIport:            null,
    APIpath:            null,
    ConsumerKey:        null,
    ConsumerSecret:     null,
    Username:           null,
    Password:           null
};


// Check command line arguments: [--config-file=FILE.json] [USERNAME PASSWORD] URL_PATH, and
// override default config values with those read from file, if given, and with command line arguments
var argv = require('minimist')(process.argv.slice(2), { default: { 'config-file': 'package.json' }});
if (fs.existsSync(argv['config-file'])) {
    var file_config = require('./' + path.relative(__dirname, argv['config-file']));
    file_config = file_config.config || file_config;
    Object.keys(config).filter(hasOwnProperty, file_config).forEach(function(key) {
        config[key] = file_config[key];
    });
}
config.APIpath = argv._.pop() || config.APIpath;
config.Username = argv._[0] || config.Username;
config.Password = argv._[1] || config.Password;
if (!config.APIpath || !config.Username || !config.Password) {
    var usage = 'node testAPI.js [--config-file=FILE.json] [USERNAME PASSWORD] URL_PATH';
    console.log('Not enough arguments.\nUsage: %s', usage);
    process.exit(1);
}


function testAPI() {
    // Initialize OAuth
    var consumer = util.format('%s:%s', config.ConsumerKey, config.ConsumerSecret);
    var oauth2 = new OAuth2(config.ConsumerKey, config.ConsumerSecret, config.IDMaddress, null, 'oauth2/token', null);
    oauth2._customHeaders = { Authorization: 'Basic ' + new Buffer(consumer).toString('base64') };

    // Get token and make request
    var creds = {
        grant_type: 'password',
        username: config.Username,
        password: config.Password
    };
    console.log('Get token from %s...', config.IDMaddress || '<invalid url>');
    oauth2.getOAuthAccessToken('', creds, function(error, access_token, refresh_token, results) {
        if (error) {
            console.log(error.code || JSON.parse(error.data).error.message);
            process.exit(2);
        } else {
            console.log('Access token: %s', access_token);
            makeRequest(access_token);
        }
    });
}


function makeRequest(token) {
    var bearer = new Buffer(token).toString('base64');
    var options = {
        hostname: config.APIip,
        port: config.APIport,
        path: config.APIpath,
        pathname: config.APIpath.split('?')[0],
        headers: { 'Authorization': 'Bearer ' + bearer }
    };
    console.log('Request to %s...', 'http:' + url.format(options) || '<invalid url>');
    http.get(options, function(res2) {
        res2.setEncoding('utf8');
        res2.on('data', function(data) {
            console.log(JSON.stringify(JSON.parse(data), null, 2));
        });
    }).on('error', function(e) {
       console.log("Got error: %s",  e.message);
    });
}


testAPI();
